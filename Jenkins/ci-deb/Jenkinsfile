#!groovy

def ACCOUNT = "garystafford"
def PROJECT_NAME = "spring-postgresql-demo"

pipeline {
    agent any
    tools {
        gradle 'gradle'
    }
    stages {
        stage('Checkout GitHub') {
            steps {
                git changelog: true, poll: true,
                        branch: 'master',
                        url: "https://github.com/${ACCOUNT}/${PROJECT_NAME}"
            }
        }
        stage('Build') {
            steps {
                sh 'gradle wrapper'
                sh './gradlew clean build -x test'
            }
        }
        stage('Unit Test') { // unit test against h2
            steps {
                withEnv(['SPRING_DATASOURCE_URL=jdbc:h2:mem:elections']) {
                    sh './gradlew cleanTest test'
                }
                junit '**/build/test-results/test/*.xml'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh "./gradlew sonarqube -Dsonar.projectName=${PROJECT_NAME}"
                }
            }
        }
        stage('Build Debian Package') {
            steps {
                sh "./gradlew packDeb --info"
            }
        }
        stage('Upload Debian Package') {
            steps {
                withCredentials([string(credentialsId: 'GPG_SECRET_ID', variable: 'GPG_SECRET_ID')]) {
                    sh "sh ./upload-deb-package.sh ${GPG_SECRET_ID}"
                }
            }
        }
        stage('Archive Artifact') { // option 1 to build Dockerfile in next pipeline
            steps {
                archiveArtifacts 'build/libs/*.jar'
            }
        }
    }
    post {
        success {
            slackSend(color: '#008000',
                    message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
        failure {
            slackSend(color: '#FF0000',
                    message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
    }
}
