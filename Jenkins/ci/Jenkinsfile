#!groovy

def ACCOUNT = "garystafford"
def PROJECT_NAME = "spring-postgresql-demo"

pipeline {
    agent any
    tools {
        gradle 'gradle'
    }
    stages {
        stage('Checkout GitHub') {
            steps {
                withCredentials([
                        string(credentialsId: 'GIT_TOKEN', variable: 'GIT_TOKEN')]) {
                    git changelog: true, poll: true,
                            branch: 'master',
                            url: "https://${GIT_TOKEN}@github.com/${ACCOUNT}/${PROJECT_NAME}"
                }
            }
        }
        stage('Build') {
            steps {
                sh 'gradle wrapper'
                sh 'LOGGING_LEVEL_ROOT=INFO ./gradlew clean build -x test --info'
            }
        }
        stage('Unit Test') { // unit test against h2
            steps {
                withEnv(['SPRING_DATASOURCE_URL=jdbc:h2:mem:elections']) {
                    sh 'LOGGING_LEVEL_ROOT=INFO ./gradlew cleanTest test --info'
                }
                junit '**/build/test-results/test/*.xml'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh "LOGGING_LEVEL_ROOT=INFO ./gradlew sonarqube -Dsonar.projectName=${PROJECT_NAME} --info"
                }
            }
        }
        stage('Archive Build Artifact') { // option 1 to build Dockerfile in next pipeline
            steps {
                archiveArtifacts 'build/libs/*.jar'
            }
        }
        // stage('Publish Artifact') { // option 2 to build Dockerfile in next pipeline
        //     steps {
        //         withCredentials([string(credentialsId: 'GIT_TOKEN', variable: 'GIT_TOKEN')]) {
        //             dir('build/libs/') {
        //                 sh "git init \
        //                 && git config user.name \"jenkins-ci\" \
        //                 && git config user.email \"jenkins-ci@jenkins-ci.com\" \
        //                 && git add *.jar \
        //      && git commit -m \"Publish build artifact\" \
        //                 && git push --force --quiet --progress \
        //         \"https://x-access-token:${GIT_TOKEN}@github.com/${ACCOUNT}/${PROJECT_NAME}.git\" \
        //                 master:build-artifacts-gke"
        //             }
        //         }
        //     }
    }
}
post {
    success {
        slackSend(color: '#79B12B',
                message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
    failure {
        slackSend(color: '#FF0000',
                message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
}
