#!groovy

def ACCOUNT = "garystafford"
def PROJECT_NAME = "spring-postgresql-demo"

pipeline {
    agent any
    tools {
        gradle 'gradle'
    }
    stages {
        stage('Checkout GitHub') {
            steps {
                git changelog: true, poll: true,
                        branch: 'master',
                        url: "https://github.com/${ACCOUNT}/${PROJECT_NAME}"
            }
        }
        stage('Build') {
            steps {
                sh 'gradle wrapper'
                sh './gradlew clean build -x test'
            }
        }
        stage('Unit Test') { // unit test against h2
            steps {
                withEnv(['SPRING_DATASOURCE_URL=jdbc:h2:file:~/elections']) {
                    sh './gradlew cleanTest test'
                }
                junit '**/build/test-results/test/*.xml'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh "./gradlew sonarqube -Dsonar.projectName=${PROJECT_NAME}"
                }
            }
        }
        stage('Archive Artifact') { // option 1 to build Dockerfile in next pipeline
            steps {
                archiveArtifacts 'build/libs/*.jar'
            }
        }
        stage('Publish Artifact') { // option 2 to build Dockerfile in next pipeline
            steps {
                withCredentials([string(credentialsId: 'GIT_TOKEN', variable: 'GIT_TOKEN')]) {
                    dir('build/libs/') {
                        sh "git init \
                        && git config user.name \"jenkins-ci\" \
                        && git config user.email \"jenkins-ci@jenkins-ci.com\" \
                        && git add *.jar \
             && git commit -m \"Publish build artifact\" \
                        && git push --force --quiet --progress \
                \"https://x-access-token:${GIT_TOKEN}@github.com/${ACCOUNT}/${PROJECT_NAME}.git\" \
                        master:build-artifacts-gke"
                    }
                }
            }
        }
    }
    post {
        success {
            slackSend(color: '#008000',
                    message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
        failure {
            slackSend(color: '#FF0000',
                    message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
    }
}
