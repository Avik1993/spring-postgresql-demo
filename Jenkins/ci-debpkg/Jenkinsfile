#!groovy

def ACCOUNT = "garystafford"
def PROJECT_NAME = "spring-postgresql-demo"

pipeline {
    agent any
    tools {
        gradle 'gradle'
    }
    stages {
        stage('Checkout GitHub') {
            steps {
                withCredentials([
                        string(credentialsId: 'GIT_TOKEN', variable: 'GIT_TOKEN')]) {
                    git changelog: true, poll: true,
                            branch: 'master',
                            url: "https://${GIT_TOKEN}@github.com/${ACCOUNT}/${PROJECT_NAME}"
                }
            }
        }
        stage('Build') {
            steps {
                sh 'gradle wrapper'
                sh 'LOGGING_LEVEL_ROOT=INFO ./gradlew clean build -x test --info'
            }
        }
        stage('Unit Test') { // unit test against h2
            steps {
                withEnv(['SPRING_DATASOURCE_URL=jdbc:h2:mem:elections']) {
                    sh 'LOGGING_LEVEL_ROOT=INFO ./gradlew cleanTest test --info'
                }
                junit '**/build/test-results/test/*.xml'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh "LOGGING_LEVEL_ROOT=INFO ./gradlew sonarqube -Dsonar.projectName=${PROJECT_NAME}  --info"
                }
            }
        }
        stage('Build Debian Package') {
            steps {
                sh "LOGGING_LEVEL_ROOT=INFO ./gradlew packDeb --info"
            }
        }
        stage('Upload Debian Package') {
            steps {
                withCredentials([
                        string(credentialsId: 'GPG_KEY_ID', variable: 'GPG_KEY_ID'),
                        string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh "sh ./upload-deb-package.sh ${GPG_KEY_ID}"
                }
            }
        }
    }
    post {
        success {
            slackSend(color: '#00FF00',
                    message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
        failure {
            slackSend(color: '#FF0000',
                    message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
    }
}
