buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.9.0-rc.1'
        classpath 'com.netflix.nebula:nebula-release-plugin:6.3.3'
    }
}

plugins {
    id 'org.sonarqube' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.5.RELEASE'
    id 'org.springframework.boot' version '2.0.1.RELEASE'
    id 'java'
    id 'eclipse'
    id 'idea'
}

apply plugin: 'nebula.ospackage'
apply plugin: 'nebula.release'

def artifact_name = project.name + '-' + version

task packDeb(type: Deb) { // creates .deb package for deployment
    into '/opt/' + project.name // root directory

    from(jar.outputs.files) { // copy .jar
        into 'lib'
        fileMode 0500
    }
    from('build/resources/main/*.conf') { // copy .conf
        into 'conf'
        fileMode 0400
    }

    // symlinks jar to init.d, init.d to rc2.d, conf to jar location
    link('/etc/init.d/election',
            '/opt/' + rootProject.name + '/lib/' + artifact_name + '.jar')
    link('/opt/' + rootProject.name + '/lib/' + artifact_name + '.conf',
            '/opt/' + rootProject.name + '/conf/' + artifact_name + '.conf')
    link('/etc/rc2.d/S02election',
            '/etc/init.d/election')
}

bootJar { // creates fully executable archives
    launchScript()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

ext {
    springBootVersion = '2.0.1.RELEASE'
}

dependencies {
    compileOnly('org.projectlombok:lombok:1.16.20')
    compile('com.h2database:h2:1.4.197')
    compile("io.springfox:springfox-swagger-ui:2.8.0")
    compile("io.springfox:springfox-swagger2:2.8.0")
    compile("org.liquibase:liquibase-core:3.5.5")
    compile("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2")
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-rest:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-hateoas:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    runtime("org.postgresql:postgresql:42.2.2")
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        exceptionFormat 'full'
    }
}
